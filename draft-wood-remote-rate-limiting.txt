



Network Working Group                                         C. A. Wood
Internet-Draft                                                Cloudflare
Intended status: Standards Track                          14 August 2023
Expires: 15 February 2024


                   The Remote Rate Limiting Protocol
                 draft-wood-remote-rate-limiting-latest

Abstract

   TODO

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Source for this draft and an issue tracker can be found at
   https://github.com/chris-wood/draft-wood-remote-rate-limiting.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 15 February 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology
   3.  Threat Model
   4.  Overview
     4.1.  Offline Registration
     4.2.  Online Rule Generation
       4.2.1.  Examples
     4.3.  Limitations
   5.  Applications
   6.  Security Considerations
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Appendix A.  Acknowledgements
   Author's Address

1.  Introduction

   Privacy proxy systems such as those built on MASQUE [CONNECT-UDP],
   Oblivious HTTP [OHTTP], and WireGuard [WIREGUARD]. provide one common
   feature: they mask a client's true IP address from the targets to
   which clients interact with through these proxies.  While this offers
   meaningful privacy benefits to clients, it complicates common
   operational security practices, such as IP addresses to help identify
   and mitigate abusive traffic.  Examples of abusive traffic include
   malicious or otherwise malformed application data sent to targets
   through the proxies, volumetric flooding attacks, and general
   (distributed) denial of service (DoS) attacks.  Naturally, absent
   some mechanism to apply granular rate limits to individual client
   connections, targets are left with broad sweeping mitigations that
   target the proxy service, such as IP-based rate limits, and therefore
   affect all of its clients, including those which do not engage in
   abusive behavior.

   Proactively preventing abuse through (privacy-preserving) client
   authentication is one alternative solution that can help mitigate
   such abuse in practice.  In particular, proxies can only admit
   service to authentiated clients, or targets can use privacy-
   preserving authentication protocols such as Privacy Pass
   [PRIVACY-PASS] to admit client traffic.  Another type of solution
   might be in form of some "humanity check" such as a CAPTCHA, with the
   intent of making sure that some human is responsible for client
   traffic rather than an automated bot.  However, there are several
   important ways in which these proactive techniques can be inadequate
   in practice:

   1.  Authorization decisions based on client authentication do not
       attest to client behavior -- they only attest to the client
       identity.  This means that authenticated clients can still engage
       in abusive behavior.

   2.  Authorization decisions based on humanity checks also do not
       attest to client behavior.  Humans interacting with an
       application can intentionally initiate abusive traffic.

   Reactive mitigation mechanisms complement proactive mechanisms.
   Reactive mechanisms allow targets and proxy systems to work together
   to take corrective action to minimize or remove abusive traffic.

   This document describes a protocol that can implement one limited
   form of reactive mitigation, called the remote rate limiting (RRL)
   protocol.  RRL builds on ACME to enable seamless registration and
   configuration between proxies and targets.  Targets use
   authentication information from ACME to request rate limiting actions
   by the target.

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Client:  An entity that interacts with remote services, called
      targets.

   Target:  A service or resource that clients interact with.

   Proxy:  An entity that sits between client and target.

3.  Threat Model

   The remote rate limiting (RRL) protocol is based on the following
   threat model.  Clients are either honest or malicious.  Honest
   clients do not engage in abusive behavior, whereas malicious clients
   are carry out whatever behavior they wish, including abusive
   behavior.  Targets can also be honest or malicious.  An honest target
   will faithfully use the protocol to protect itself against abuse,
   whereas a malicious target will try to use the protocol to carry out
   the following goals.

   1.  De-anonymize honest clients.  The attacker aims to use the rate
       limiting protocol to violate whatever privacy properties the
       proxy purports to provide for its clients.

   2.  Disproportionately and negatively impact honest clients.  The
       attacker aims to misuse the rate limiting protocol to single out
       honest clients and cause service disruption for them.

   Malicious clients can engage in abusive behavior with the intent of
   disrupting service for honest targets, or for negatively impacting
   the proxy service for other honest clients.

   XXX(caw): is the proxy honest or malicious?  Probably honest, since
   otherwise it could just send abusive traffic or break client privacy

4.  Overview

   Given the threat model in Section 3, the remote rate limiting (RRL)
   protocol is based on the following assumptions:

   1.  The definition of abuse varies widely and depends on the target
       service.  In other words, targets are authoritative for what is
       considered abusive traffic that negatively affects the target.

   2.  Proxies cannot trust targets which cannot authenticate
       themselves, as this can spoofed by attackers (malicious targets).
       Moreover, authenticating a target does necessarily mean the
       target is honest; an authenticated target can still engage in
       malicious behavior.  As such, the rate limiting protocol cannot
       leak information to the the privacy proxy that it does not
       already know.  In particular, the protocol cannot depend on
       application data that is encrypted and unknown to the proxy.
       This ensures that the protocol cannot be misused by targets in an
       attempt to deanonymize clients.

   3.  IP addresses are not suitable for authentication and
       authorization decisions.  In particular, this means that proxies
       cannot use target IP addresses to determine whether or not a
       particular target message is authenticated.

   4.  XXX(caw): target should not be able to learn information based on
       the rule being enacted example: OHTTP with two clients vs OHTTP
       with 100 clients, and using rate limit to learn info about the
       set size

   The protocol is divided into two phases: an offline registration
   phase (Section 4.1), wherein targets obtain authentication material
   used for the online phase of the protocol, and an online phase
   (Section 4.2), wherein targets send rate limiting rules to the proxy
   for enactment.  Details about each phase are below.

4.1.  Offline Registration

   Registration is built on ACME, which is a protocol for obtaining
   authentication credentials in the form of a certificate.  Targets run
   the ACME protocol with a proxy to obtain RRL authentication
   certificates.  The certificate that's issued MUST have the
   clientAuthentication EKU configured, as it will be used for
   authenticating the client.  They then use these certificates in the
   online phase of the protocol.

   [[NOTE: this is pretty straightforward -- what more would we actually
   need to say here?]]

4.2.  Online Rule Generation

   The online phase of RRL is based on HTTP.  Targets, as HTTP clients,
   send messages to a proxy Rule Resource to enact rate limit rules.
   Each rule is meant to limit the number of acceptable connections or
   requests in a given time window.  Rules are expressed using the
   semantics in [RATE-LIMIT].  In particular, rate limits represent some
   limit, a policy (in terms of quota-units), and a time-based condition
   after which the limit resets.

   Proxies are configured with a URL for their RRL Rule Resource, e.g.,
   "https://proxy.example/.well-known/rrl-rules".  Targets connect to
   the proxy using mutually authenticated TLS with the credentials they
   obtained during the offline registration phase (Section 4.1).  Once
   they connect, they send POST messages to the proxy Rule Resource with
   a JSON object ([RFC8259], Section 4).  The contents of this JSON
   object are defined in Table 1.

    +==================+==============================================+
    | Field Name       | Value                                        |
    +==================+==============================================+
    | Target           | Name of the target                           |
    | (optional)       |                                              |
    +------------------+----------------------------------------------+
    | RateLimit-Limit  | As defined in Section 5.1 of [RATE-LIMIT],   |
    |                  | except that parameters are not permitted,    |
    |                  | encoded as a JSON string.                    |
    +------------------+----------------------------------------------+
    | RateLimit-Policy | As defined in Section 5.2 of [RATE-LIMIT],   |
    |                  | except that parameters other than "unit" are |
    |                  | not permitted, encoded as a JSON string.     |
    +------------------+----------------------------------------------+
    | RateLimit-Reset  | As defined in Section 5.4 of [RATE-LIMIT],   |
    |                  | except that parameters are not permitted,    |
    |                  | encoded as a JSON string.                    |
    +------------------+----------------------------------------------+

                     Table 1: RRL Rule Resource message

   Proxies MUST validate the values received in the Rule Resource
   message fields before using them and check if there are (significant)
   discrepancies with the expected ones.  This includes a RateLimit-
   Reset field moment too far in the future, a policy limit too high, or
   fields with disallowed parameters.  Proxies MAY ignore malformed Rule
   Resource messages and respond to them with a 400 error.

   The "unit" parameter for the RateLimit-Policy field has the following
   permissible values:

   *  requests: This means the rate limit quota applies to HTTP
      requests.  This is only enforceable by a proxy if it can see
      requests, e.g., if it is an OHTTP Relay Resource (see Section 2 of
      [OHTTP]).

   *  connections: This means the rate limit quota applies to number of
      connections.

   *  bandwidth: This means the rate limit applies to the bandwidth
      consumed by a given connection or request.

   Proxies that validate and accept Rule Resource messages respond to
   them with 200 OK messages.

   Sample Rule Resource messages and the scenario to which they would
   apply are in Section 4.2.1.

4.2.1.  Examples

   XXX(caw): include the following: - Simple OHTTP rule - Port scanning
   rule - Excessive bandwidth rule

4.3.  Limitations

5.  Applications

   XXX(caw): OHTTP, MASQUE (TCP/UDP), WireGuard (VPN)

6.  Security Considerations

   TODO

7.  IANA Considerations

8.  References

8.1.  Normative References

   [RATE-LIMIT]
              Polli, R. and A. M. Ruiz, "RateLimit header fields for
              HTTP", Work in Progress, Internet-Draft, draft-ietf-
              httpapi-ratelimit-headers-07, 24 June 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-
              ratelimit-headers-07>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8259]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/rfc/rfc8259>.

8.2.  Informative References

   [CONNECT-UDP]
              Schinazi, D., "Proxying UDP in HTTP", RFC 9298,
              DOI 10.17487/RFC9298, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9298>.

   [OHTTP]    Thomson, M. and C. A. Wood, "Oblivious HTTP", Work in
              Progress, Internet-Draft, draft-ietf-ohai-ohttp-09, 27
              July 2023, <https://datatracker.ietf.org/doc/html/draft-
              ietf-ohai-ohttp-09>.

   [OHTTP-RateLimit]
              Reddy.K, T., Wing, D., Boucadair, M., and R. Polli,
              "Oblivious Relay Feedback", Work in Progress, Internet-
              Draft, draft-rdb-ohai-feedback-to-proxy-09, 14 May 2023,
              <https://datatracker.ietf.org/doc/html/draft-rdb-ohai-
              feedback-to-proxy-09>.

   [PRIVACY-PASS]
              Davidson, A., Iyengar, J., and C. A. Wood, "The Privacy
              Pass Architecture", Work in Progress, Internet-Draft,
              draft-ietf-privacypass-architecture-14, 9 August 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-
              privacypass-architecture-14>.

   [WIREGUARD]
              "WireGuard: Next Generation Kernel Network Tunnel", n.d.,
              <https://www.ndss-symposium.org/wp-
              content/uploads/2017/09/ndss2017_04A-
              3_Donenfeld_paper.pdf>.

Appendix A.  Acknowledgements

   This document was inspired by [OHTTP-RateLimit], which was focused on
   a variant of the problem addressed by this document and tailored
   specifically work within OHTTP, rather than alongside it.

Author's Address

   Christopher A. Wood
   Cloudflare
   101 Townsend St
   San Francisco,
   United States of America
   Email: caw@heapingbits.net
